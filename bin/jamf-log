#!/bin/bash
# +------------- 
# | JAMF-LOG |- #
# +------------- #
# | Script for parsing and filtering through Jamf logs files.
# |
# | This script is still in development currently, but the end goal is to be able to
# | view and filter log files in the same format as the 'JAMFSoftwareServer.log' files.
# +-------------------------------------------------------------------------------------------------------
# | Usage: jamf-log [<LOG_FILE_PATH>] [-h | --help]
# |
# | Parse through Jamf log files with ease
# |
# |  Options:
# |    -h, --help              Display this usage help
# |    -c, --color             Color code the different log entry types [ERROR/WARN/INFO/DEBUG]
# +-------------------------------------------------------------------------------------------------------
# Copyright 2022 Martin Cox
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions: The
# above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
# ----------------------------------------------------------------------------

# ------------------------ #
# -|  GLOBAL VARIABLES  |- #
# ------------------------ #

# PID of the show_spinner function
# Used to stop/kill the spinner when the test is complete
_SPIN_PID=""

# Name of this script file
name_of_script="${FUNCNAME[0]}"

# -------------------------- #
# -|  COLOR CODING TYPES  |- #
# -------------------------- #

# Color to use for [ERROR] log entries
cc_error='1'

# Color to use for [WARN] log entries
cc_warn='11'

# Color to use for [INFO] log entries
cc_info='6'

# Color to use for [DEBUG] log entries
cc_debug='3'

# ----------------------- #
# -|  COLOR VARIABLES  |- #
# ----------------------- #

NOSTYLE='\033[0m'
RED='\033[0;31m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'

BOLD='\033[1m'
DIM='\033[2m'
ITALIC='\033[3m'

# ----------------------- #
# -|  DEFAULT OPTIONS  |- #
# ----------------------- #

# Whether or not to color code the log entries
# Color coding is based on error/warn/info/debug
color_code="enabled"

# Log file to use
log_file_path='./JAMFSoftwareServer.log'

# ------------------------ #
# -|  GLOBAL FUNCTIONS  |- #
# ------------------------ #

# Print usage information for this script
# -------------------------------------------
# @ Arguments: NONE
# @ Usage: usage
# @ Return: Prints usage message (no return)
# -------------------------------------------
# @ Global Variables: NONE
# -------------------------------------------
usage() {
  echo -e "
  Usage: ${BOLD}jamf-log${NS} [${ITALIC}<LOG_FILE_PATH>${NS}] [${BOLD}-h${NS} | ${BOLD}--help${NS}]

  Script for parsing and filtering through Jamf logs files

  ${DIM}Options:${NS}
    ${BOLD}-h${NS}, ${BOLD}--help${NS}              Display this usage help
    ${BOLD}-c${NS}, ${BOLD}--color${NS}             Color code the different log entry types ${CYAN}[DEFAULT]:${NS} ${cc_error}ERROR${NS}, ${cc_warn}WARN${NS}, ${cc_info}INFO${NS}, ${cc_debug}DEBUG${NS}"
}

# A function to generate and animate a spinning loading icon
# -----------------------------------------------------------
# @ Arguments:
# --> framerate [NUMBER] | Desired framerate     (optional)
# --> spinner   [STRING] | Characters to animate (optional)
# -----------------------------------------------------------
# @ Usage: _spinner [$framerate] [$spinner_characters_to_use]
# @ Return: no return value
# -------------------------------------------
# @ Global Variables: NONE
# -----------------------------------------------------------
_spinner() {
  # Duration between each frame of the animation
  local framerate=$1
  # Characters to animate for the spinner
  local spinner=$2
  # Number of animation frames to use
  local total_frames=$((${#spinner} - 1))

  # Animate the spinner indefinitely (until killed)
  while :; do
    # Loop through each character in the spinner
    for i in $(seq 0 $total_frames); do

      # Print the spinner frame
      echo -n " [${spinner:$i:1}]"

      # Clear previous for next animation frame
      echo -ne "\b\b\b\b"

      # Wait $framerate for the next frame
      sleep "$framerate"
    done
  done

}

# Function to show a spinner while something is loading
# -------------------------------------------
# @ Arguments: NONE
# @ Usage: show_spinner
# @ Return: Shows the animated icon until stopped (no return)
# -------------------------------------------
# @ Global Variables:
# --> $_SPIN_PID - Sets to PID of spinner process
# -------------------------------------------
# shellcheck disable=SC2120
show_spinner() {
  # Duration between each frame of the animation
  local framerate=${1:-0.2}
  # Characters to animate for the spinner
  local spinner=${2:-"/|\\-/|\\-"}

  # Start showing the spinner animation
  _spinner "$framerate" "$spinner" &
  # Update the $_SPIN_PID global variable
  _SPIN_PID=$!

  # Kill the spinner on any signal, including our own exit
  trap 'kill -9 $_SPIN_PID' $(seq 0 15) >/dev/null 2>&1
}

# Function to kill the spinner on demand
# -------------------------------------------
# @ Arguments: NONE
# @ Usage: stop_spinner
# @ Return: Shows the animated icon until stopped (no return)
# -------------------------------------------
# @ Global Variables:
# --> $_SPIN_PID - Resets back to ""
# -------------------------------------------
stop_spinner() {
  # Check if the _SPIN_PID process is still running or not
  if ps -p "$_SPIN_PID" >/dev/null; then
    # Kill the spinner PID
    kill $_SPIN_PID

    # Clear the $_SPIN_PID value
    _SPIN_PID=""
  fi
}

# A function to ask the user if they want to try again
# -------------------------------------------
# @ Arguments: NONE
# @ Usage: _try-again "Question to ask" $function_to_run_again
# @ Return: 0 on success, non-zero on error
# -------------------------------------------
# @ Global Variables: NONE
# -------------------------------------------
# shellcheck disable=SC2120
_try-again() {
  # Whether or not to try again
  # Default: y / yes
  local default_answer="y"
  # Question to ask in the prompt
  local question=${1:-"Would you like to try again?"}
  # Function to run again if answer is yes/y
  local func_to_run="$2"

  read -rp "$question [y/n]: " response

  # Anser is the response or the default
  response=${response:-"$default_answer"}

  # Convert the answer to lowercase
  response=$(echo "$response" | tr '[:upper:]' '[:lower:]')

  # Check if it's 'y' or 'yes'
  if [ "$response" == "y" ] || [ "$response" == "yes" ]; then
    # Check if the second argument is supplied
    if [ -n "$func_to_run" ]; then
      # Run the supplied function
      "$2"
    fi

    # We ARE going to try again
    return 0
  else
    # We ARE NOT going to try again
    return 1
  fi
}

# Function to ask for the log file
# @Usage: _ask-for-logfile
_ask-for-logfile() {

  # Holds the user's response
  local response=""

  # Ask the user where the log file is
  # With path completion with tab
  read -rep "Path to log file: " response

  # Check to ensure the file is valid
  if [ ! -f "$response" ]; then

    # Supplied path is not a valid file
    echo >&2 -e "${RED}[ERROR]${NS}: Specified file is not valid, evaluating '${ITALIC}$response${NS}'\n"
    
    # Ask if we want to enter a different file path, or exit if we don't want to try again
    _try-again "Would you like to try a different file?" _ask-for-logfile || return $?

  fi

  # Update the $log_file_path with the provided path
  log_file_path="$response"

  # Return success
  return 0

}

# ---------------- #
# SCRIPT FUNCTIONS #
# ---------------- #

# Function to check the validity of the provided log file
# @Usage: check-log-file
check-log-file () {

  # Check if the provided file is valid or not
  if [ ! -f "$log_file_path" ]; then

    # The file is not valid/doesn't exist
    echo >&2 -e "${RED}[ERROR]${NS}: Specified log file could not be found at '$log_file_path'."

    # Ask for the log file path since it's not valid
    if ! _ask-for-logfile; then

      # Another invalid log file or user declined to enter the path again
      echo "Exiting script..."
      exit 1

    fi

  fi

}

# Function to color code the log entries based on their type
# Error: RED
# Warn: ORANGE
# INFO: CYAN
# DEBUG: YELLOW
#
# @Usage: output=$(color-code-log)
# @Return: The color-coded output
color-code-log() {

  # Color code log entries (if enabled)
  if [ "$color_code" == "enabled" ]; then

    # Color coding is enabled
    # Color code the entries and save it to a variable
    # Add the ERROR colors
    local log_data=$(sed -E "s/(\[error[^]]*\])/$(tput setaf $cc_error)\1$(tput sgr0)/gi" "$log_file_path")
    # Add the WARN colors
    log_data=$(sed -E "s/(\[(warn|warning)[^]]*\])/$(tput setaf $cc_warn)\1$(tput sgr0)/gi" "$log_file_path")
    # Add the DEBUG colors
    log_data=$(sed -E "s/(\[debug[^]]*\])/$(tput setaf $cc_debug)\1$(tput sgr0)/gi" "$log_file_path")
    # Add the INFO colors
    log_data=$(sed -E "s/(\[info[^]]*\])/$(tput setaf $cc_info)\1$(tput sgr0)/gi" "$log_file_path")

    cat "$log_file_path"

  fi

}

# cat JAMFHTTP.log | sed -E "s/(\[debug\])/$(tput setaf $orange)\1$(tput sgr0)/gi" | sed -E "s/(\[warn[^]]+\])/$(tput setaf $yellow)\1$(tput sgr0)/gi"
# https://unix.stackexchange.com/questions/269077/tput-setaf-color-table-how-to-determine-color-codes

# ---------------------- #
# -| ARGUMENT PARSING |- #
# ---------------------- #

# Parse the command line arguments for this script
# @Usage: parse-args "$@"
parse-args() {
  # Check if there are any arguments provided
  if [ "$#" -ne 0 ]; then

    # Check if the first argument is the log file path
    if [[ "$1" =~ *".log"* ]]

    # There are arguments provided
    # Transform long options to short ones
    for arg in "$@"; do

      shift

      case "$arg" in
      "--help") set -- "$@" "-h" ;;
      "--color") set -- "$@" "-c" ;;
      *) set -- "$@" "$arg" ;;

      esac

    done

    # Parse short options
    while getopts ":hc" options; do

      # Check the different flags
      case $options in
      # Dispaly the usage information
      "h")
        usage
        exit 0
        ;;
      "c") color_code="enabled" ;;
      # Unrecognized option
      \?)

        # Let them know we have an unrecognized option
        echo >&2 -e "${BOLD}$name_of_script${NS}: ${RED}unrecognized option${NS} --> $OPTARG"

        # Print the usage information
        usage

        # Exit with an error
        exit 1
        ;;
      :)

        # Signal that one of the options requires an argument and is missing it
        echo >&2 -e "${BOLD}$name_of_script${NS}: ${RED}[ERROR]:${NS} Option -$OPTARG requires an argument"

        # Print the usage information
        usage

        # Exit with an error
        exit 1
        ;;
      esac

    done

  fi # End - Argument parsing conditional

  # Remove the processed arguments
  shift $((OPTIND - 1))

}

# ----------------- #
# MAIN SCRIPT LOGIC #
# ----------------- #

# Parse script arguments
parse-args "$@"

# Check provided log file
check-log-file

# Color code log entries based on their type
color-code-log
