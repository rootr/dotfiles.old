#!/usr/bin/env bash

# shellcheck source=/Users/martin.cox/.dotfiles/src/config_files/zsh/variables
source "$HOME/.dotfiles/src/config_files/zsh/variables"

# Preferred CD implementation
# change directory and list it's contents with exa
cd() {

  builtin cd "$@" || return

  # Check if we've got exa installed or not
  if command -v exa >/dev/null 2>&1; then

    exa -lha

  else

    # Exa is not currently installed
    # proceed with normal ls command
    ls -la --color=always

  fi

} # End - cd replacement function

wait_ssh() {
  # Check that an argument is passed
  if [ "$#" -eq 0 ]; then
    # No arguments provided
    echo -e "${RED}[ERROR]${NS}: Host/IP is a required argument but was not found"
    exit 1
  fi

  # Host to wait for and then connect to
  local host="$1"

  # Keep track of whether the loop was cancelled or succeeded
  local ping_cancelled=false

  # Ping until cancelled or succeeded
  # Then background the process
  until ping -c1 -w1 "$host" >/dev/null 2>&1; do :; done &

  # Add a trap to trap the process
  trap 'kill $!; $ping_cancelled=true' SIGINT

  # Wait for the loop to exit
  wait $!

  # Remove the trap as we're done using it
  trap - SIGINT

  # Let the user know we're done
  echo "Done pinging, cancelled=$ping_cancelled"

}

# List recent UFW BLOCK logs
ufw-logs() {
  # Get the recent log output
  full_log_output=$(dmesg | tail -30)

  # Filter the output
  filtered_log_output=$(echo "$full_log_output" | awk '/SPT=/ { if ($8 ~ /10\.0\.0\.[[:digit:]]{1,3}/ && $18 ~ /^DPT/) print substr($8,5) " " substr($9,5) " " substr($17,5) " " substr($18,5) }')

  # Sort the output
  filter_log_output=$(echo "$filter_log_output" | sort)

  # Headers to display
  headers="${UNDERLINE}SOURCE_IP DESTINATION_IP SOURCE_PORT DESTINATION_PORT${NS}"

  # Display the filtered output
  echo -e "$headers\n$filtered_log_output\n$headers" | column -tc4
}


# Lists the directory contents in a readable format
# using 'exa' and falling back to ls -la --color=always
list_contents() {
  # Check if exa is installed
  if command -v exa >/dev/null 2>&1; then
    # exa is installed
    exa -lha "$@"

    return 0
  fi

  # Otherwise, fallback to using the ls command
  ls -la --color=always "$@"

  return 0
}

get-devices() {
  devicesJSON=$(curl -ks "http://10.0.0.145:49090/1/devices?auth=17E22BFD1D3")

  echo "$devicesJSON"
}

# Function to install homebrew
install-brew() {
  # Get the kernel type we're currently on
  local kernel_type=""
        kernel_type=$(uname | tr '[:upper:]' '[:lower:]')

  # Check if we're on Linux or macOS
  if [ "$kernel_type" = "darwin" ]; then
    # We're currently on a macOS system
    echo "Starting brew installation"
    echo -e "Enter password (if prompted) to continue\n"
    
    # Run the homebrew installation script
    if /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"; then
      # The homebrew install was successful
      echo -e "${GREEN}[SUCCESS]${NS}: Homebrew is successfully installed"
      return 0
    else
      echo -e "${RED}[FAILED]${NS}: There was an error in the Homebrew installation"
      return 1
    fi
  else
    # We're currently on a Linux system
    # https://docs.brew.sh/Homebrew-on-Linux

    # Start the brew installation on Linux
    echo -e "${ORANGE}[WARN]${NS}: ${BOLD}install-brew${NS} installation is not yet support on Linux systems"
    return 1
  fi
}
