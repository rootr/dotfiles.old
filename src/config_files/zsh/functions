#!/usr/bin/env bash

# shellcheck source=/Users/martin.cox/.dotfiles/src/config_files/zsh/variables
source "$HOME/.dotfiles/src/config_files/zsh/variables"

# Preferred CD implementation
# change directory and list it's contents with exa
cd() {

  builtin cd "$@" || return

  # Check if we've got exa installed or not
  if command -v exa >/dev/null 2>&1; then

    exa -lha

  else

    # Exa is not currently installed
    # proceed with normal ls command
    ls -la --color=always

  fi

} # End - cd replacement function

wait_ssh() {
  # Check that an argument is passed
  if [ "$#" -eq 0 ]; then
    # No arguments provided
    echo -e "${RED}[ERROR]${NS}: Host/IP is a required argument but was not found"
    exit 1
  fi

  # Host to wait for and then connect to
  local host="$1"

  # Keep track of whether the loop was cancelled or succeeded
  local ping_cancelled=false

  # Ping until cancelled or succeeded
  # Then background the process
  until ping -c1 -w1 "$host" >/dev/null 2>&1; do :; done &

  # Add a trap to trap the process
  trap "kill $!; $ping_cancelled=true" SIGINT

  # Wait for the loop to exit
  wait $!

  # Remove the trap as we're done using it
  trap - SIGINT

  # Let the user know we're done
  echo "Done pinging, cancelled=$ping_cancelled"

}

# List recent UFW BLOCK logs
ufw-logs() {
  # Get the recent log output
  full_log_output=$(dmesg | tail -30)

  # Filter the output
  filtered_log_output=$(echo "$full_log_output" | awk '/SPT=/ { if ($8 ~ /10\.0\.0\.[[:digit:]]{1,3}/ && $18 ~ /^DPT/) print substr($8,5) " " substr($9,5) " " substr($17,5) " " substr($18,5) }')

  # Sort the output
  filter_log_output=$(echo "$filter_log_output" | sort)

  # Headers to display
  headers="${UNDERLINE}SOURCE_IP DESTINATION_IP SOURCE_PORT DESTINATION_PORT${NS}"

  # Display the filtered output
  echo -e "$headers\n$filtered_log_output\n$headers" | column -tc4
}


# Lists the directory contents in a readable format
# using 'exa' and falling back to ls -la --color=always
list_contents() {
  # Check if exa is installed
  if command -v exa >/dev/null 2>&1; then
    # exa is installed
    exa -lha "$@"

    return 0
  fi

  # Otherwise, fallback to using the ls command
  ls -la --color=always "$@"

  return 0
}

get-devices() {
  devicesJSON=$(curl -ks "http://10.0.0.145:49090/1/devices?auth=17E22BFD1D3")

  echo "$devicesJSON"
}

# Function to ssh into a machine from the ssh config file
_s() {
  # Check to make sure an argument was supplied
  if [ "$#" -eq 0 ]; then
    echo >&2 -e "${RED}[ERROR]${NS}: One (1) argument is required, but was not found.\n  --> ${RED}Missing host name argument${NS}"
    return 1
  fi

  # Host to connect to
  local host="$1"

  # Check if the argument is valid
  if [ -z "$host" ]; then
    echo >&2 -e "${RED}[ERROR]${NS}: Host is a required, but was not found.\n"
    return 1
  fi

  # Convert host the lowercase
  host=$(tr '[:upper:]' '[:lower:]' <<<"$host")

  echo -n "Attempting connection to host... "

  # Show a spinning icon to indicate loading
  # and capture the output as the spinner PID
  spinner show

  # Check which host we're connecting to
  case "$host" in
    'media-pi'|'media'|'m'|'mpi'|'mediapi')
      ssh media-pi
      spinner stop 
      ;;
    'mbp'|'jamfmbp'|'jamf-mbp'|'jamfmacbookpro'|'jamfpro'|'jmbp')
      ssh jamf-mbp
      ;;
    'mba'|'jamfmba'|'jmba'|'jamf-mba'|'jmacbookair'|'jair'|'jamfair')
      ssh jamf-mba
      ;;
    'arch-pi'|'archpi'|'api'|'arch-rpi'|'arpi')
      ssh arch-pi
      ;;
    *)
      echo >&2 -e "${RED}[ERROR]${NS}: Unknown host, please try again."
      return 1
      ;;
  esac

  return 0
}

# Use GenerateEncryptedString() locally - DO NOT include in the script!
# The 'Encrypted String' will become a parameter for the script in the JSS
# The unique 'Salt' and 'Passphrase' values will be present in your script
function GenerateEncryptedString() {
    # Usage ~$ GenerateEncryptedString "String"
    local STRING="${1}"
    local SALT=$(openssl rand -hex 8)
    local K=$(openssl rand -hex 12)
    local ENCRYPTED=$(echo "${STRING}" | openssl enc -aes256 -a -A -S "${SALT}" -k "${K}")
    echo "Encrypted String: ${ENCRYPTED}"
    echo "Salt: ${SALT} | Passphrase: ${K}"
}

# Include DecryptString() with your script to decrypt the password sent by the JSS
# The 'Salt' and 'Passphrase' values would be present in the script
function DecryptString() {
    # Usage: ~$ DecryptString "Encrypted String" "Salt" "Passphrase"
    echo "${1}" | /usr/bin/openssl enc -aes256 -d -a -A -S "${2}" -k "${3}"
}
